{"ast":null,"code":"import { applyMiddleware, compose, createStore } from \"redux\";\nimport createSagaMiddleware from \"@redux-saga/core\";\nimport { rootSaga } from \"../../saga/rootSaga\";\nimport { reducers } from \"../reducer\";\nimport { sessionService } from 'redux-react-session';\nexport const configStore = initialState => {\n  const sagaMidddleware = createSagaMiddleware();\n  const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  const middleware = [sagaMidddleware];\n  const store = createStore(reducers, initialState, composeEnhancer(applyMiddleware(...middleware)));\n  sessionService.initSessionService(store, {\n    refreshOnCheckAuth: true,\n    driver: 'LOCALSTORAGE'\n  });\n  sagaMidddleware.run(rootSaga);\n  return store;\n};","map":{"version":3,"sources":["C:/Users/support/Desktop/xtm/src/redux/store/store.js"],"names":["applyMiddleware","compose","createStore","createSagaMiddleware","rootSaga","reducers","sessionService","configStore","initialState","sagaMidddleware","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","middleware","store","initSessionService","refreshOnCheckAuth","driver","run"],"mappings":"AAAA,SAASA,eAAT,EAAyBC,OAAzB,EAAiCC,WAAjC,QAAoD,OAApD;AACA,OAAOC,oBAAP,MAAiC,kBAAjC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AAEA,OAAO,MAAMC,WAAW,GAAIC,YAAD,IAAkB;AACzC,QAAMC,eAAe,GAAGN,oBAAoB,EAA5C;AACA,QAAMO,eAAe,GAAGC,MAAM,CAACC,oCAAP,IAA+CX,OAAvE;AACA,QAAMY,UAAU,GAAG,CAACJ,eAAD,CAAnB;AACA,QAAMK,KAAK,GAAGZ,WAAW,CAACG,QAAD,EACbG,YADa,EAEbE,eAAe,CAACV,eAAe,CAAC,GAAGa,UAAJ,CAAhB,CAFF,CAAzB;AAGAP,EAAAA,cAAc,CAACS,kBAAf,CAAkCD,KAAlC,EAAyC;AAACE,IAAAA,kBAAkB,EAAE,IAArB;AAA2BC,IAAAA,MAAM,EAAE;AAAnC,GAAzC;AACAR,EAAAA,eAAe,CAACS,GAAhB,CAAoBd,QAApB;AACA,SAAOU,KAAP;AACH,CAVM","sourcesContent":["import { applyMiddleware,compose,createStore } from \"redux\";\r\nimport createSagaMiddleware from \"@redux-saga/core\";\r\nimport { rootSaga } from \"../../saga/rootSaga\";\r\nimport { reducers } from \"../reducer\";\r\nimport { sessionService } from 'redux-react-session';\r\n\r\nexport const configStore = (initialState) => {\r\n    const sagaMidddleware = createSagaMiddleware();\r\n    const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n    const middleware = [sagaMidddleware];\r\n    const store = createStore(reducers,\r\n                initialState,\r\n                composeEnhancer(applyMiddleware(...middleware)));\r\n    sessionService.initSessionService(store, {refreshOnCheckAuth: true, driver: 'LOCALSTORAGE' });\r\n    sagaMidddleware.run(rootSaga);\r\n    return store;\r\n}"]},"metadata":{},"sourceType":"module"}